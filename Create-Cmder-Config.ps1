function write_config_comments($var, $json) {
  $msg = "Do not edit this file. This file is auto-generated and replaced by scripts in $((Resolve-Path `"./`").Path)"
  write_comment_to_config $var $var.bashConfig "#!/bin/bash/env bash"
  write_comment_to_config $var $var.allConfig $msg
  write_to_config $var $var.allConfig ""
}

function write_config_variables($var, $json) {
  $json.variables | ForEach-Object -Process {
    $variableName = $_.Name
    $variableValue = $_.Value

    write_variable_to_config $var $var.allConfig $variableName $variableValue
  }
  write_variable_to_config $var $var.allConfig "portableDir" $var.portableDir
  write_variable_to_config $var $var.allConfig "binDir" $var.binDir
  write_variable_to_config $var $var.allConfig "cmderConfigDir" $var.cmderConfigDir
  write_to_config $var $var.allConfig ""
}

function write_config_paths($var, $json) {
  $json.paths | ForEach-Object -Process {
    $nameOfBin = $_.Name
    $relativePathToBin = $_.Path
    $absolutePathToBin = normalize_path $var.binDir $relativePathToBin
    
    if($nameOfBin -eq $null) {
      $nameOfBin = $relativePathToBin
    }
    write_path_to_config $var $var.allConfig $nameOfBin $absolutePathToBin
  }
  write_to_config $var $var.allConfig ""
}

function write_config_aliases($var, $json) {
  $json.aliases | ForEach-Object -Process {
    $aliasName = $_.Name
    $aliasValue = $_.Value

    write_alias_to_config $var $var.allConfig $aliasName $aliasValue
  }
  write_to_config $var $var.allConfig ""
}

function cmder_config_write($var, $json) {
  print_title "Add comments"
  write_config_comments $var $json
  print_title "Add variables"
  write_config_variables $var $json
  print_title "Add paths"
  write_config_paths $var $json
  print_title "Add aliases"
  write_config_aliases $var $json
}

# Creates / overwrites config files
function create_config_files($json, $var) {
  # Remove config files if they already exist
  if (Test-Path $var.bashConfig -PathType Leaf) {
    Remove-Item -Path $var.bashConfig
  }
  if (Test-Path $var.psConfig -PathType Leaf) {
    Remove-Item -Path $var.psConfig
  }
  if (Test-Path $var.cmdConfig -PathType Leaf) {
    Remove-Item -Path $var.cmdConfig
  }

  # Create new config items (none should exist in dir now)
  New-Item $var.bashConfig | Out-Null
  New-Item $var.psConfig | Out-Null
  New-Item $var.cmdConfig | Out-Null
}
 
function ask_to_create_cmder_config($var, $json) {
  if ((Test-Path -Path $var.cmdConfig) -or
  (Test-Path -Path $var.psConfig) -or
  (Test-Path -Path $var.bashConfig)) {
    print_warning "You alrady have Cmder config files. Overwrite them?"

    $key = $Host.UI.RawUI.ReadKey()
    Write-Host "`r`n"
    if ($key.Character -eq 'y') {
      # Yes, overwrite existing config files
      create_config_files $json $var
      $true
    }
    elseif ($key.Character -eq 'n') {
      # No, don't want to overwrite existing config files, do nothing
      $false
    }
    else {
      # Any other character, repeat input
      ask_to_create_cmder_config $var $json
    }
  }
  else {
    # No config files exist, make and write to them
    create_config_files $var $json
    $true
  }
}
