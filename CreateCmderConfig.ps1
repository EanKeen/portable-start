function write_config_comments($var, $config) {
  $msg = "Do not edit this file. This file is auto-generated and replaced by scripts in $($var.refs.portableDir)"
  write_comment_to_config $var $var.refs.bashConfig "#!/bin/bash/env bash"
  write_comment_to_config $var $var.refs.allConfig $msg
  write_to_config $var $var.refs.allConfig ""
  
  # Writes comments to user_aliases
  write_comment_to_config $var $var.refs.cmdUserAliases $msg
  $lines = @(
    ";= `@echo off",
    ";= rem Call DOSKEY and use this file as the macrofile",
    ";= %SystemRoot%\system32\doskey /listsize=1000 /macrofile=%0%",
    ";= rem In batch mode, jump to the end of the file",
    ";= goto:eof",
    ";= Add aliases below here"
  )
  
  foreach($line in $lines) {
    "$line" | Out-File -Encoding "ASCII" -Append -FilePath $var.refs.cmdUserAliases
    print_info "write_config_comments" "Adding `"$line`" to `"user_aliases.cmd`""

  }
}

function write_config_variables($var, $config) {
  foreach($variable in $config.variables) {
    write_variable_to_config $var $var.refs.allConfig $variable.name $variable.value
  }

  write_variable_to_config $var $var.refs.allConfig "appDir" $var.refs.appDir
  write_variable_to_config $var $var.refs.allConfig "binDir" $var.refs.binDir
  write_variable_to_config $var $var.refs.allConfig "shortcutsDir" $var.refs.shortcutsDir
  write_variable_to_config $var $var.refs.allConfig "cmderConfigDir" $var.refs.cmderConfigDir
  write_variable_to_config $var $var.refs.allConfig "portableDir" $var.refs.portableDir
  write_to_config $var $var.refs.allConfig ""
}

function write_config_bins($var, $config) {
  foreach($binary in $config.binaries) {
    $absolutePathToBin = normalize_path $var.refs.binDir $binary.path
    
    write_path_to_config $var $var.refs.allConfig $binary.name $absolutePathToBin
  }
  write_to_config $var $var.refs.allConfig ""
}

function write_config_aliases($var, $config) {
  foreach($alias in $config.aliases) {
    if("bash" -in $alias.use) {
      write_alias_to_config $var $var.refs.bashConfig $alias.name $alias.value
    }
    if("ps" -in $alias.use) {
      write_alias_to_config $var $var.refs.psConfig $alias.name $alias.value
    }
    if("cmd" -in $alias.use) {
      write_alias_to_config $var $var.refs.cmdConfig $alias.name $alias.value
    }
  }
  write_to_config $var $var.refs.allConfig ""
}

function create_config_files($var, $config) {
  # Remove config files if they already exist
  if (Test-Path -Path $var.refs.bashConfig -PathType Leaf) {
    Remove-Item -Path $var.refs.bashConfig
  }
  if (Test-Path -Path $var.refs.psConfig -PathType Leaf) {
    Remove-Item -Path $var.refs.psConfig
  }
  if (Test-Path -Path $var.refs.cmdConfig -PathType Leaf) {
    Remove-Item -Path $var.refs.cmdConfig
  }
  if (Test-Path -Path $var.refs.cmdUserAliases -PathType Leaf) {
    Remove-Item -Path $var.refs.cmdUserAliases
  }

  # Create new config items (none should exist in dir now)
  New-Item -Path $var.refs.bashConfig | Out-Null
  New-Item -Path $var.refs.psConfig | Out-Null
  New-Item -Path $var.refs.cmdConfig | Out-Null
  New-Item -Path $var.refs.cmdUserAliases | Out-Null
}

function cmder_config_write($var, $config) {
  if ((Test-Path -Path $var.refs.cmdConfig) -or
    (Test-Path -Path $var.refs.psConfig) -or
    (Test-Path -Path $var.refs.bashConfig)) {
      create_config_files $var $var
      print_warning "cmder_config_write" "Old config files found. Overwriting them."
  }

  print_title "Create Cmder Config Comments"
  write_config_comments $var $config
  print_title "Create Cmder Config Variables"
  write_config_variables $var $config
  print_title "Create Cmder Config Binaries"
  write_config_bins $var $config
  print_title "Create Cmder Config Aliases"
  write_config_aliases $var $config
}
